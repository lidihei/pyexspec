# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'bfosc.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
try:
   from PyQt5 import QtCore, QtGui, QtWidgets
except:
   from PyQt6 import QtCore, QtGui, QtWidgets


class WvClibWindow(object):


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        #MainWindow.resize(1300, 615)
        MainWindow.resize(1300, 736)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        ## arc button for loading arc lamp file
        self.toolButton_load_arc = QtWidgets.QToolButton(self.centralwidget)
        self.toolButton_load_arc.setGeometry(QtCore.QRect(10, 20, 80, 22))
        self.toolButton_load_arc.setObjectName("toolButton_load_arc")
        self.lineEdit_arc = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_arc.setGeometry(QtCore.QRect(90, 20, 360, 21))
        self.lineEdit_arc.setObjectName("lineEdit_arc")
        ## linelist button for loading linelist file
        self.toolButton_load_linelist = QtWidgets.QToolButton(self.centralwidget)
        self.toolButton_load_linelist.setGeometry(QtCore.QRect(10, 45, 80, 22))
        self.toolButton_load_linelist.setObjectName("toolButton_load_linelist")
        self.lineEdit_linelist = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_linelist.setGeometry(QtCore.QRect(90, 45, 360, 21))
        self.lineEdit_linelist.setObjectName("lineEdit_linelist")
        ####---- read arc or star 
        self.CheckBoxWidget = QtWidgets.QWidget(self.centralwidget)
        self.CheckBoxWidget.setGeometry(QtCore.QRect(452, 10, 80, 15))
        self.CheckBoxWidget.setObjectName("CheckBoxWidget")
        self.layoutCheckBox = QtWidgets.QVBoxLayout(self.CheckBoxWidget)
        self.layoutCheckBox.setContentsMargins(0, 0, 0, 0)
        self.checkBox_readstar = QtWidgets.QCheckBox(self.CheckBoxWidget)
        self.checkBox_readstar.setObjectName("readstar")
        self.layoutCheckBox.addWidget(self.checkBox_readstar)
        self.checkBox_readstar.setText("Read star")
        #####---- add absorption line
        self.CheckBoxWidget = QtWidgets.QWidget(self.centralwidget)
        self.CheckBoxWidget.setGeometry(QtCore.QRect(452, 26, 130, 15))
        self.CheckBoxWidget.setObjectName("CheckBoxWidget")
        self.layoutCheckBox = QtWidgets.QVBoxLayout(self.CheckBoxWidget)
        self.layoutCheckBox.setContentsMargins(0, 0, 0, 0)
        self.checkBox_addabsorption = QtWidgets.QCheckBox(self.CheckBoxWidget)
        self.checkBox_addabsorption.setObjectName("addabsorption")
        self.layoutCheckBox.addWidget(self.checkBox_addabsorption)
        self.checkBox_addabsorption.setText("Add absorption")
        ## show order button
        self.lineEdit_order = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_order.setEnabled(True)
        self.lineEdit_order.setGeometry(QtCore.QRect(461, 70, 113, 21))
        ## table widget
        self.tableWidget_files = QtWidgets.QTableWidget(self.centralwidget)
        #self.tableWidget_files.setGeometry(QtCore.QRect(10, 70, 500, 451))
        self.tableWidget_files.setGeometry(QtCore.QRect(10, 70, 450, 610))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.tableWidget_files.setFont(font)
        try:
            self.tableWidget_files.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents) ###pyqt5
        except:
            self.tableWidget_files.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.SizeAdjustPolicy.AdjustToContents) ###pyqt5
        self.tableWidget_files.setAlternatingRowColors(True)
        self.tableWidget_files.setObjectName("tableWidget_files")
        self.tableWidget_files.setColumnCount(0)
        self.tableWidget_files.setRowCount(0)
        self.tableWidget_files.horizontalHeader().setCascadingSectionResizes(True)
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(461, 110, 134, 331))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        try:
            sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed) ###pyqt5
        except:
            sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed) ###pyqt6
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(8)
        ####----Button_upper_order
        self.pushButton_upper_order = QtWidgets.QPushButton(self.layoutWidget)
        sizePolicy.setHeightForWidth(self.pushButton_upper_order.sizePolicy().hasHeightForWidth())
        self.pushButton_upper_order.setSizePolicy(sizePolicy)
        self.pushButton_upper_order.setObjectName("pushButton_upper_order")
        self.verticalLayout.addWidget(self.pushButton_upper_order)
        ####----Button_next_order
        self.pushButton_next_order = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_next_order.setObjectName("pushButton_next_order")
        self.verticalLayout.addWidget(self.pushButton_next_order)
        ####----checkBox_xaxis_wave
        self.checkBox_xaxis_wave = QtWidgets.QCheckBox(self.layoutWidget)
        self.checkBox_xaxis_wave.setObjectName("checkBox_xaxis_wave")
        self.verticalLayout.addWidget(self.checkBox_xaxis_wave)
        self.checkBox_xaxis_wave.setText("Xaxis is Wave")
        ####----Button_plot_spec
        self.pushButton_plot_spec = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_plot_spec.setObjectName("pushButton_plot_spec")
        self.verticalLayout.addWidget(self.pushButton_plot_spec)
        ####----Button_invert_xaxis
        self.pushButton_invert_xaxis = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_invert_xaxis.setObjectName("pushButton_invert_xaxis")
        self.verticalLayout.addWidget(self.pushButton_invert_xaxis)
        ####----Button_update_table
        self.pushButton_update_table = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_update_table.setObjectName("pushButton_update_table")
        self.verticalLayout.addWidget(self.pushButton_update_table)
        ####----Button_add_line
        self.pushButton_add_line = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_add_line.setObjectName("pushButton_add_line")
        self.verticalLayout.addWidget(self.pushButton_add_line)
        ####----Button_del_line
        self.pushButton_del_line = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_del_line.setObjectName("pushButton_del_line")
        self.verticalLayout.addWidget(self.pushButton_del_line)
        ####----Button_save_line
        self.pushButton_save_line = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_save_line.setObjectName("pushButton_save_line")
        self.verticalLayout.addWidget(self.pushButton_save_line)
        ####----Button_fit
        self.pushButton_fit = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_fit.setObjectName("pushButton_fit")
        self.verticalLayout.addWidget(self.pushButton_fit)
        ####-----fitfunction
        from pyexspec.fitfunc import Polyfitdic
        fitfunclist = list(Polyfitdic.keys())
        self.comboBox_fitfunc = QtWidgets.QComboBox(self.layoutWidget)
        self.comboBox_fitfunc.addItems(fitfunclist)
        self.verticalLayout.addWidget(self.comboBox_fitfunc)
        ## show xdeg LABEL
        #self.label_xdeg =QtWidgets.QVBoxLayout()
        #self.label_xdeg.setGeometry(QtCore.QRect(511, 450, 60, 21))
        self.lineEdit_xdeg = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_xdeg.setPlaceholderText('deg(X)')
        self.lineEdit_xdeg.setEnabled(True)
        self.lineEdit_xdeg.setGeometry(QtCore.QRect(466, 450, 60, 21))
        ## show ydeg LABEL
        self.lineEdit_ydeg = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_ydeg.setPlaceholderText('deg(Y)')
        self.lineEdit_ydeg.setEnabled(True)
        self.lineEdit_ydeg.setGeometry(QtCore.QRect(533, 450, 60, 21))
        ## show initdeg LABEL
        self.lineEdit_init1Ddeg = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_init1Ddeg.setPlaceholderText('initial 1D deg')
        self.lineEdit_init1Ddeg.setEnabled(True)
        self.lineEdit_init1Ddeg.setGeometry(QtCore.QRect(466, 473, 100, 21))
        font = QtGui.QFont()
        font.setBold(True)
        #font.setWeight(75)
        self.lineEdit_order.setFont(font)
        self.lineEdit_order.setObjectName("lineEdit_order")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        #self.menubar.setGeometry(QtCore.QRect(0, 0, 1430, 24))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        ####---- find line center by Gassian fitting 
        self.CheckBoxWidget = QtWidgets.QWidget(self.centralwidget)
        self.CheckBoxWidget.setGeometry(QtCore.QRect(466, 500, 130, 21))
        self.CheckBoxWidget.setObjectName("CheckBoxWidget")
        self.layoutCheckBox = QtWidgets.QVBoxLayout(self.CheckBoxWidget)
        self.layoutCheckBox.setContentsMargins(0, 0, 0, 0)
        self.checkBox_gaussianfit = QtWidgets.QCheckBox(self.CheckBoxWidget)
        self.checkBox_gaussianfit.setObjectName("gaussianfit")
        self.layoutCheckBox.addWidget(self.checkBox_gaussianfit)
        self.checkBox_gaussianfit.setText("Gaussian Fit Peak")
        self.lineEdit_index_window = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_index_window.setPlaceholderText('Ind Window')
        self.lineEdit_index_window.setEnabled(True)
        self.lineEdit_index_window.setGeometry(QtCore.QRect(466, 521,60, 21))
        self.lineEdit_x_window = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_x_window.setPlaceholderText('X Window')
        self.lineEdit_x_window.setEnabled(True)
        self.lineEdit_x_window.setGeometry(QtCore.QRect(526, 521, 60, 21))
        ####---- the button of automatically finding emission lines
        self.pushButton_autofind = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_autofind.setGeometry(QtCore.QRect(466, 544 , 130, 30))
        self.pushButton_autofind.setObjectName("pushButton_autofind")
        ##--npix_chunk the chunk length (half) 
        self.lineEdit_npix_chunk = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_npix_chunk.setPlaceholderText('npix_chunk')
        self.lineEdit_npix_chunk.setEnabled(True)
        self.lineEdit_npix_chunk.setGeometry(QtCore.QRect(466, 569 ,130, 21))
        ##--the width of ccf kernel 
        self.lineEdit_ccf_kernel_width = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_ccf_kernel_width.setPlaceholderText('CCF Kernel Width')
        self.lineEdit_ccf_kernel_width.setEnabled(True)
        self.lineEdit_ccf_kernel_width.setGeometry(QtCore.QRect(466, 590, 130, 21))
        ##--the number of sigma clipping (float)   num_sigma_clip
        self.lineEdit_num_sigma_clip = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_num_sigma_clip.setPlaceholderText('num_sigma_clip')
        self.lineEdit_num_sigma_clip.setEnabled(True)
        self.lineEdit_num_sigma_clip.setGeometry(QtCore.QRect(466, 611, 130, 21))
        ##-- Template button for loading template lamp file
        self.toolButton_load_template = QtWidgets.QToolButton(self.centralwidget)
        self.toolButton_load_template.setGeometry(QtCore.QRect(10, 685, 90, 22))
        self.toolButton_load_template.setObjectName("toolButton_load_template")
        self.lineEdit_template = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_template.setGeometry(QtCore.QRect(101, 685, 360, 21))
        self.lineEdit_template.setObjectName("lineEdit_template")
        ##-- Template button for loading line table
        self.toolButton_load_linetable = QtWidgets.QToolButton(self.centralwidget)
        self.toolButton_load_linetable.setGeometry(QtCore.QRect(10, 709, 90, 22))
        self.toolButton_load_linetable.setObjectName("toolButton_load_linetable")
        self.lineEdit_linetable = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_linetable.setGeometry(QtCore.QRect(101, 709, 360, 21))
        self.lineEdit_linetable.setObjectName("lineEdit_linetable")
        ####---- plot template 
        self.CheckBoxWidget = QtWidgets.QWidget(self.centralwidget)
        self.CheckBoxWidget.setGeometry(QtCore.QRect(466, 636, 130, 21))
        self.CheckBoxWidget.setObjectName("CheckBoxWidget")
        self.layoutCheckBox = QtWidgets.QVBoxLayout(self.CheckBoxWidget)
        self.layoutCheckBox.setContentsMargins(0, 0, 0, 0)
        self.checkBox_plotTemplate = QtWidgets.QCheckBox(self.CheckBoxWidget)
        self.checkBox_plotTemplate.setObjectName("plotTemplate")
        self.layoutCheckBox.addWidget(self.checkBox_plotTemplate)
        self.checkBox_plotTemplate.setText("Plot Template")
        ####---- plot the initial wavelength 
        self.CheckBoxWidget = QtWidgets.QWidget(self.centralwidget)
        self.CheckBoxWidget.setGeometry(QtCore.QRect(466, 656, 130, 21))
        self.CheckBoxWidget.setObjectName("CheckBoxWidget")
        self.layoutCheckBox = QtWidgets.QVBoxLayout(self.CheckBoxWidget)
        self.layoutCheckBox.setContentsMargins(0, 0, 0, 0)
        self.checkBox_initialwv = QtWidgets.QCheckBox(self.CheckBoxWidget)
        self.checkBox_initialwv.setObjectName("initialwv")
        self.layoutCheckBox.addWidget(self.checkBox_initialwv)
        self.checkBox_initialwv.setText("initial WV")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", f"Manually Calibrate Wave"))
        self.pushButton_update_table.setText(_translate("MainWindow", "update table"))
        self.pushButton_upper_order.setText(_translate("MainWindow", "upper order"))
        self.pushButton_next_order.setText(_translate("MainWindow", "next order"))
        self.pushButton_plot_spec.setText(_translate("MainWindow", "plot spec"))
        self.pushButton_invert_xaxis.setText(_translate("MainWindow", "invert X-axis"))
        self.pushButton_add_line.setText(_translate("MainWindow", "add line"))
        self.pushButton_del_line.setText(_translate("MainWindow", "del line"))
        self.pushButton_save_line.setText(_translate("MainWindow", "save lines"))
        self.pushButton_fit.setText(_translate("MainWindow", "fit"))
        self.toolButton_load_arc.setText(_translate("MainWindow", "ARC..."))
        self.toolButton_load_linelist.setText(_translate("MainWindow", "LINELIST..."))
        self.pushButton_autofind.setText(_translate("MainWindow", "atuo-find lines"))
        self.toolButton_load_template.setText(_translate("MainWindow", "Template..."))
        self.toolButton_load_linetable.setText(_translate("MainWindow", "Line Table..."))
